[pause_resume]
recover_velocity: 50.

[display_status]

[gcode_macro CENTER_EXTRUDER]
description: Move extruder to center of bed
gcode:
  {% set x_center = printer.toolhead.axis_maximum.x | float / 2 %}
  {% set y_center = printer.toolhead.axis_maximum.y | float / 2 %}
  # Calculate z movement
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = act_z + 5.0 %}
  {% else %}
      {% set z_safe = max_z %}
  {% endif %}

  # Begin Macro
  SAVE_GCODE_STATE NAME=CENTER_EXTRUDER
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_center} Y{y_center} F3000
  {% else %}
    {action_raise_error("Printer not homed")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=CENTER_EXTRUDER

[gcode_macro PARK_EXTRUDER_AND_BED]
description: Move extruder to back left and bed to front
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = act_z + 35.0 %}
  {% else %}
      {% set z_safe = max_z %}
  {% endif %}

  # Begin Macro
  SAVE_GCODE_STATE NAME=PARK_EXTRUDER_AND_BED
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F3000
  {% else %}
    {action_raise_error("Printer not homed")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PARK_EXTRUDER_AND_BED

[gcode_macro RETRACT_EXTRUDER]
# Call macro RETURN=false for first run and RETURN=true for second run
description: Retract the extruder
# change this if you need more or less extrusion (Retraction)
# Always use positive value
variable_extrude: 5.0
variable_extrude_speed: 4500
gcode:
  ##### read variables set in macro #####
  {% set E = printer["gcode_macro RETRACT_EXTRUDER"].extrude|float %}
  {% set E_speed = printer["gcode_macro RETRACT_EXTRUDER"].extrude_speed|float %}
  # set extrude to negative if not returning
  {% if params.RETURN|lower == 'false' %}
    {% set E = -E %}
  {% endif %}
  ####
  SAVE_GCODE_STATE NAME=RETRACT_EXTRUDER
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E{E} F{E_speed}
  {% else %}
    {action_raise_error("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=RETRACT_EXTRUDER

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# do not change this, automatically defined by the macro
variable_extruder_temp: 0
variable_extruder_z: 1
gcode:
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_temp VALUE={printer.extruder.target|float}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=extruder_z VALUE={printer.toolhead.position.z|float}
  PAUSE_BASE
  RETRACT_EXTRUDER RETURN=false
  # M104 S0 ; turn off extruder
  PARK_EXTRUDER_AND_BED
  M150 ; turn off LED

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read variables from pause macro #####
  {% set E_temp = printer["gcode_macro PAUSE"].extruder_temp|float %}
  {% set extruder_z = printer["gcode_macro PAUSE"].extruder_z|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=RESUME
  M109 S{E_temp}
  RETRACT_EXTRUDER RETURN=true
  G90
  G1 Z{extruder_z} F2000
  RESTORE_GCODE_STATE NAME=RESUME
  M150 W255 ; Set White LED
  RESUME_BASE {get_params}
  CLEAR_PAUSE

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE
  CLEAR_PAUSE

[gcode_macro G29]
gcode:
 BED_MESH_CLEAR
 BED_MESH_CALIBRATE
 BED_MESH_PROFILE SAVE=x1

#[gcode_macro G34]
#gcode:
#     G28
#     Z_TILT_ADJUST

[gcode_macro G35]
gcode:
     G28
     SCREWS_TILT_CALCULATE

# Call using START_PRINT EXTRUDER=200 BED=60 ABL=true
[gcode_macro START_PRINT]
gcode:
  {% set E_temp = (params.EXTRUDER | default(180, true)) | float %}
  {% set Bed_temp = (params.BED | default(60, true)) | float %}
  {% set ABL_ENABLED = ((params.ABL | default(true)) | lower) == 'true' %}
  ECHO output="Starting print with extruder temp: {E_temp}, bed temp: {Bed_temp}, and abl: {ABL_ENABLED}"

  CLEAR_PAUSE
  G21 ; set units to millimeters

  M140 S{Bed_temp} ;Start heating bed

  {% if not ABL_ENABLED %}
    # start heating immediately if not probing
    M117 Start Heating
    M150 R255 ; Set Red LED
    M104 S{E_temp} ;Start heating extruder
  {% else %}
    # preheat when probing
    M150 B255 ; Set Blue LED
    M104 S{[E_temp, 100] | min} ;Start heating extruder to lower of extruder or 100
  {% endif %}

  G28 ; home XYZ
  {% if ABL_ENABLED %}
    M117 Probe Bed
    M150 U255 ; Set Green LED
    G29 ; Probe bed
  {% endif %}

  G90 ; Absolute positioning
  {% if ABL_ENABLED %}
    M117 Start Heating
    M150 R255 ; Set Red LED
    # Turn on heating when not probing
    M104 S{E_temp} ;Start heating extruder
  {% endif %}
  G1 X2 Y20 Z10.0 F3000 ; move to starting position
  M109 S{E_temp} ;Wait for extruder to reach temp before proceeding
  M190 S{Bed_temp} ;Wait for bed to reach temp before proceeding

  M117 Purge extruder
  M150 W255 ; Set White LED
  M83 ; relative extruder
  G1 X2 Y20 Z0.3 F5000.0 ; move to start-line position
  G1 E10 F1500 ; extrude 10mm of material to purge extruder
  G1 X2 Y200.0 Z0.3 F1500.0 E20 ; draw 1st line
  G1 X2 Y200.0 Z0.4 F5000.0 ; move to side a little
  G1 X2 Y20 Z0.4 F1500.0 E20 ; draw 2nd line
  G1 Z1.0 F3000 ; move z up little to prevent scratching of surface

  # Prepare for printing
  G90 ; Absolute positioning
  M82 ; Absolute extruder
  G92 E0 ; reset extruder

  M117 Start printing

# Prevents resetting homing information
[gcode_macro M84]
rename_existing: M984
gcode:
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
  SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0

[gcode_macro M18]
rename_existing: M918
gcode:
  M84

[gcode_macro END_PRINT]
gcode:
  RETRACT_EXTRUDER RETURN=false
  PARK_EXTRUDER_AND_BED

  TURN_OFF_HEATERS
  M84 ; disable motors
  M106 S0 ; turn off fan
  M150 ; turn off LED

[gcode_macro M900]
gcode:
  {% set K_Factor = params.K | default(0, true) %}
  SET_PRESSURE_ADVANCE ADVANCE={K_Factor}


######### Bltouch Macros ##########
[gcode_macro M48]
description: Check probe accuracy
gcode:
  PROBE_ACCURACY

[gcode_macro M280]
description: Control Bltouch
gcode:
  {% if params.P|int == 0 %}
    {% if params.S|int == 90 %}
      BLTOUCH_DEBUG COMMAND=pin_up
    {% elif params.S|int == 10 %}
      BLTOUCH_DEBUG COMMAND=pin_down
    {% elif params.S|int == 120 %}
      BLTOUCH_DEBUG COMMAND=self_test
    {% elif params.S|int == 160 %}
      BLTOUCH_DEBUG COMMAND=reset
    {% endif %}

  {% endif %}

######### LED ############
[gcode_macro M150]
description: Set RGB Color
gcode:
  {% if 'R' in params or 'B' in params or 'U' in params %}
    {% if 'R' in params %}
      # Clamp value between 0 and 255
      {% set red_value = [params.R|int, 0] | max %}
      {% set red_value = [red_value, 255] | min %}
      set_pin PIN=LED_pin_RED VALUE={red_value}
    {% else %}
      set_pin PIN=LED_pin_RED VALUE=0
    {% endif %}
    {% if 'B' in params %}
      {% set blue_value = [params.B|int, 0] | max %}
      {% set blue_value = [blue_value, 255] | min %}
      set_pin PIN=LED_pin_BLUE VALUE={blue_value}
    {% else %}
      set_pin PIN=LED_pin_BLUE VALUE=0
    {% endif %}
    {% if 'U' in params %}
      {% set green_value = [params.U|int, 0] | max %}
      {% set green_value = [green_value, 255] | min %}
      set_pin PIN=LED_pin_GREEN VALUE={green_value}
    {% else %}
      set_pin PIN=LED_pin_GREEN VALUE=0
    {% endif %}
  {% elif 'W' in params %}
    {% set white_value = [params.W|int, 0] | max %}
    {% set white_value = [white_value, 255] | min %}
    set_pin PIN=LED_pin_RED VALUE={white_value}
    set_pin PIN=LED_pin_GREEN VALUE={white_value}
    set_pin PIN=LED_pin_BLUE VALUE={white_value}
  {% else %}
    set_pin PIN=LED_pin_RED VALUE=0
    set_pin PIN=LED_pin_GREEN VALUE=0
    set_pin PIN=LED_pin_BLUE VALUE=0
  {% endif %}

######### Override default heating gcode ##########
# Same as marlin where S waits only for heating and R waits for heating and cooling
[gcode_macro M109]
description: Set extruder temp and wait for it to be reached
rename_existing: M109.1
variable_close_enough: 0.5
gcode:
  {% set close_enough = printer["gcode_macro M109"].close_enough|float %}
  {% if 'R' in params %}
    {% set E_temp = params.R|float %}
    M104 S{E_temp} ;Start heating extruder
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={E_temp - close_enough} MAXIMUM={E_temp + close_enough}
  {% elif 'S' in params %}
    {% set E_temp = params.S|float %}
    M104 S{E_temp} ;Start heating extruder
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={E_temp}
  {% else %}
    {action_raise_error("M109 called without S or R parameter")}
  {% endif %}

[gcode_macro M190]
description: Set bed temp and wait for it to be reached
rename_existing: M190.1
variable_close_enough: 0.5
gcode:
  {% set close_enough = printer["gcode_macro M190"].close_enough|float %}
  {% if 'R' in params %}
    {% set B_temp = params.R|float %}
    M140 S{B_temp} ;Start heating bed
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={B_temp - close_enough} MAXIMUM={B_temp + close_enough}
  {% elif 'S' in params %}
    {% set B_temp = params.S|float %}
    M140 S{B_temp} ;Start heating bed
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={B_temp}
  {% else %}
    {action_raise_error("M190 called without S or R parameter")}
  {% endif %}

# Original work
# https://github.com/Desuuuu/klipper-macros/blob/master/macros/M204.cfg
[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}
